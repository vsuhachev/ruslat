#!/usr/bin/env ruby

require "ruslat"
require "optparse"

options = {
  convert: :rus_lat,
  "typo-correct": true,
  "case-correct": true
}

OptionParser.new do |parser|
  parser.banner = "Usage: ruslat [options] [path]"

  parser.on("-R", "Convert RUS => LAT (default)") { options[:convert] = :rus_lat }
  parser.on("-L", "Convert LAT => RUS") { options[:convert] = :lat_rus }

  parser.on("-t", "--text=TEXT", String, "Text to convert")
  # parser.on("-f", "--[no-]filename", "Convert file names")
  # parser.on("-d", "--[no-]dirname", "Convert directory names")
  # parser.on("-r", "--[no-]recursive", "Convert file/directory names recursive")

  parser.on("-T", "--[no-]typo-correct", "Typo correct (default: true)")
  parser.on("-C", "--[no-]case-correct", "Case correct (default: true)")

  parser.on("-v", "--[no-]verbose", "Run verbosely")

  parser.on("-h", "--help", "Prints this page") do
    puts parser
    exit
  end
end.parse!(into: options)

text = if options.key?(:text)
         options[:text].to_s
       elsif ARGV[0] && File.exist?(ARGV[0])
         File.read(ARGV[0])
       elsif !$stdin.tty?
         $stdin.read
       else
         ARGV.join(" ")
       end

text.chomp!

if options[:convert] == :rus_lat
  text = Ruslat.rus_typo_correct(text) if options[:"typo-correct"]
  text = Ruslat.rus_to_lat(text)
  text = Ruslat.lat_case_correct(text) if options[:"case-correct"]
elsif options[:convert] == :lat_rus
  text = Ruslat.lat_typo_correct(text) if options[:"typo-correct"]
  text = Ruslat.lat_to_rus(text)
end

$stdout << text
$stdout << "\n" unless text.empty?
